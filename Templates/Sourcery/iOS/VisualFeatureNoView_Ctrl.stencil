{% for type in types.implementing.VisualFeatureNoView %}
// sourcery:inline:{{ type.name }}_Controller_Core
import XCEToolbox
import XCEUniFlow

//---

extension {{ type.name }}
{
    //swiftlint:disable comma
    class Controller: BaseViewCtr
        , DispatcherInitializable
        , NestedType
        //swiftlint:enable comma
    {
        typealias Parent = EnclosingType

        typealias Model = Parent
        {% if type.implements.ImplicitViewModel %}
        typealias ViewModel = Parent // SAME as Model!
        {% else %}
        typealias ViewModel = Parent.ViewModel
        {% endif %}

        //---

        let dispatcher: Dispatcher.Proxy

        // MARK: - Initializers

        required
        init(with proxy: Dispatcher.Proxy)
        {
            dispatcher = proxy

            //---

            super.init(nibName: nil, bundle: nil)

            //---

            proxy.subscribe(self)
        }

        required
        init?(coder aDecoder: NSCoder)
        {
            fatalError("Not supposed to be called!")
        }
    }
}
// sourcery:end

// sourcery:inline:{{ type.name }}_Controller_CustomCodeDraft

// MARK: - Overrides

extension {{ type.name }}.Controller
{
    //
}

// MARK: - UniFlow support

extension {{ type.name }}.Controller: StateObserver
{
    static
    let bindings: [ObserverBinding] = [

        //
    ]
}

// MARK: - Commands

private
extension {{ type.name }}.Controller
{
    //
}
// sourcery:end
{% endfor %}
